From 17a56ad157bfb53b05e206e8b8be3494e6ec784e Mon Sep 17 00:00:00 2001
From: Pablo Saavedra <psaavedra@igalia.com>
Date: Fri, 30 Sep 2022 12:26:37 +0200
Subject: [PATCH] [JSC][ARMv7] Fix clang compiler errors Constexpr if with a
 non-bool condition https://bugs.webkit.org/show_bug.cgi?id=245871

Reviewed by NOBODY (OOPS!).

* Source/JavaScriptCore/jit/CCallHelpers.cpp:
(JSC::CCallHelpers::emitCTIThunkPrologue):
(JSC::CCallHelpers::emitCTIThunkEpilogue):
* Source/JavaScriptCore/wasm/js/JSToWasm.cpp:
(JSC::Wasm::marshallJSResult):
* Source/JavaScriptCore/wasm/js/WasmToJS.cpp:
(JSC::Wasm::wasmToJS):

diff --git a/Source/JavaScr
---
 Source/JavaScriptCore/jit/CCallHelpers.cpp | 4 ++--
 Source/JavaScriptCore/wasm/js/JSToWasm.cpp | 4 ++--
 Source/JavaScriptCore/wasm/js/WasmToJS.cpp | 4 ++--
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/Source/JavaScriptCore/jit/CCallHelpers.cpp b/Source/JavaScriptCore/jit/CCallHelpers.cpp
index 53d8d1ea..d5ca59cb 100644
--- a/Source/JavaScriptCore/jit/CCallHelpers.cpp
+++ b/Source/JavaScriptCore/jit/CCallHelpers.cpp
@@ -107,14 +107,14 @@ void CCallHelpers::emitCTIThunkPrologue(bool returnAddressAlreadyTagged)
 #   error "Not implemented on platform"
 #endif
     // Make enough space on the stack to pass arguments in a call
-    if constexpr (maxFrameExtentForSlowPathCall)
+    if constexpr (static_cast<bool>(maxFrameExtentForSlowPathCall))
         subPtr(TrustedImm32(maxFrameExtentForSlowPathCall), stackPointerRegister);
 }
 
 void CCallHelpers::emitCTIThunkEpilogue()
 {
     // Reset stack
-    if constexpr (maxFrameExtentForSlowPathCall)
+    if constexpr (static_cast<bool>(maxFrameExtentForSlowPathCall))
         addPtr(TrustedImm32(maxFrameExtentForSlowPathCall), stackPointerRegister);
     // Restore frame pointer and return address
 #if CPU(X86_64)
diff --git a/Source/JavaScriptCore/wasm/js/JSToWasm.cpp b/Source/JavaScriptCore/wasm/js/JSToWasm.cpp
index 50581132..a142daed 100644
--- a/Source/JavaScriptCore/wasm/js/JSToWasm.cpp
+++ b/Source/JavaScriptCore/wasm/js/JSToWasm.cpp
@@ -216,12 +216,12 @@ void marshallJSResult(CCallHelpers& jit, const TypeDefinition& typeDefinition, c
 
         constexpr GPRReg savedResultsGPR = preferredArgumentGPR<decltype(operationAllocateResultsArray), 4>();
         jit.move(CCallHelpers::stackPointerRegister, savedResultsGPR);
-        if constexpr (maxFrameExtentForSlowPathCall)
+        if constexpr (static_cast<bool>(maxFrameExtentForSlowPathCall))
             jit.subPtr(CCallHelpers::TrustedImm32(maxFrameExtentForSlowPathCall), CCallHelpers::stackPointerRegister);
         ASSERT(wasmContextInstanceGPR != savedResultsGPR);
         jit.setupArguments<decltype(operationAllocateResultsArray)>(wasmContextInstanceGPR, CCallHelpers::TrustedImmPtr(&typeDefinition), indexingType, savedResultsGPR);
         jit.callOperation(FunctionPtr<OperationPtrTag>(operationAllocateResultsArray));
-        if constexpr (maxFrameExtentForSlowPathCall)
+        if constexpr (static_cast<bool>(maxFrameExtentForSlowPathCall))
             jit.addPtr(CCallHelpers::TrustedImm32(maxFrameExtentForSlowPathCall), CCallHelpers::stackPointerRegister);
 
         jit.boxCell(GPRInfo::returnValueGPR, JSRInfo::returnValueJSR);
diff --git a/Source/JavaScriptCore/wasm/js/WasmToJS.cpp b/Source/JavaScriptCore/wasm/js/WasmToJS.cpp
index 21bc93d7..05962543 100644
--- a/Source/JavaScriptCore/wasm/js/WasmToJS.cpp
+++ b/Source/JavaScriptCore/wasm/js/WasmToJS.cpp
@@ -432,13 +432,13 @@ Expected<MacroAssemblerCodeRef<WasmEntryPtrTag>, BindingFailure> wasmToJS(VM& vm
 
         constexpr GPRReg savedResultsGPR = preferredArgumentGPR<decltype(operationIterateResults), 4>();
         jit.move(CCallHelpers::stackPointerRegister, savedResultsGPR);
-        if constexpr (maxFrameExtentForSlowPathCall)
+        if constexpr (static_cast<bool>(maxFrameExtentForSlowPathCall))
             jit.subPtr(CCallHelpers::TrustedImm32(maxFrameExtentForSlowPathCall), CCallHelpers::stackPointerRegister);
         static_assert(noOverlap(savedResultsGPR, JSRInfo::returnValueJSR));
         ASSERT(wasmContextInstanceGPR != savedResultsGPR);
         jit.setupArguments<decltype(operationIterateResults)>(wasmContextInstanceGPR, CCallHelpers::TrustedImmPtr(&typeDefinition), JSRInfo::returnValueJSR, savedResultsGPR, CCallHelpers::framePointerRegister);
         jit.callOperation(FunctionPtr<OperationPtrTag>(operationIterateResults));
-        if constexpr (maxFrameExtentForSlowPathCall)
+        if constexpr (static_cast<bool>(maxFrameExtentForSlowPathCall))
             jit.addPtr(CCallHelpers::TrustedImm32(maxFrameExtentForSlowPathCall), CCallHelpers::stackPointerRegister);
 
         exceptionChecks.append(jit.emitJumpIfException(vm));
